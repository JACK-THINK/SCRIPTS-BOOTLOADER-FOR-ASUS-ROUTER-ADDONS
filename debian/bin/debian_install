#!/bin/sh
#
########## CHECK ASUS ROUTER MODEL ##########
#
ROUTER_MODEL=$(nvram get model)
#
########## END ##########
#
#
########## SET THE CUSTOM VARIABLES ##########
#
# 设置自定义变量
# 当该程序运行结束，此处设置的变量自动取消
#
# USB_MOUNT_POINT: The mount point of the USB flash drive
# 设置自定义变量USB_MOUNT_POINT为U盘挂载点
USB_MOUNT_POINT=$(nvram get script_usbmount | sed 's/\/script_bootloader.*//')
#
# SBL_SYS_USR: The directory which contains all the external software resources (add-ons) related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_USR为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统外部软件资源目录，即插件目录
SBL_SYS_USR=${USB_MOUNT_POINT}/script_bootloader/usr
#
# PRIVATE_ROOT: The root directory for this program
# 设置自定义变量PRIVATE_ROOT为此程序根目录
PRIVATE_ROOT=${SBL_SYS_USR}/debian
#
# PRIVATE_ETC: The directory which contains all the configuration files related to this program
# 设置自定义变量PRIVATE_ETC为此程序配置文件目录
PRIVATE_ETC=${PRIVATE_ROOT}/etc
#
# PRIVATE_USR: The directory which contains all the external software resources related to this program
# 设置自定义变量PRIVATE_USR为此程序外部软件资源目录
PRIVATE_USR=${PRIVATE_ROOT}/usr
#
# ROUTER_ARCHITECTURE: Architecture of the ASUS Router
# 设置自定义变量ROUTER_ARCHITECTURE为华硕路由器架构
case $(uname -m) in
    "armv7l")
        ROUTER_ARCHITECTURE="arm"
        ;;
    "aarch64")
        ROUTER_ARCHITECTURE="arm64"
        ;;
    "mips")
        ROUTER_ARCHITECTURE="mipsle"
        # Prompt the user that debian doesn't support ${ROUTER_ARCHITECTURE}
        logger -st "($(basename $0))" $$ "***** DEBIAN DOESN'T SUPPORT ${ROUTER_ARCHITECTURE} *****"
        exit 6
        ;;
    *)
        # Do nothing but prompt the user
        # 如果路由器架构不符合上述三种情况，则执行
        logger -st "($(basename $0))" $$ "***** ROUTER ARCHITECTURE IS UNKNOWN *****"
        exit 3
        ;;
esac
#
# NAME OF THE SERVICE
# 服务名称
SERVICE_NAME="DEBIAN"
#
# FUNCTION OF THE SERVICE
# 服务功能
SERVICE_FUNCTION="INSTALLATION"
#
########## END ##########
#
#
########## NOTIFICATION ##########
#
logger -st "($(basename $0))" $$ "*--------- ${SERVICE_NAME} ON ${ROUTER_MODEL} ${SERVICE_FUNCTION} ---------*"
#
########## END ##########
#
#
########## INSTALL DEBIAN ##########
#
# Check if ENTWARE_ENABLE SERVICE has been loaded
# 检查ENTWARE_ENABLE SERVICE是否已启用
if [ $(which opkg) == "/opt/bin/opkg" ]
then
    logger -st "($(basename $0))" $$ "***** ENTWARE_ENABLE SERVICE HAS BEEN LOADED *****"
    #
    # Prepare Debian Environment
    # 准备Debian环境
    tar xzvf ${PRIVATE_USR}/debian_jessie8.9-arm_clean.tgz -C /opt/
    mkdir -p /opt/debian_mnt/
    cp ${PRIVATE_ETC}/S99debian /opt/etc/init.d/
    chmod 755 /opt/etc/init.d/S99debian
    cp ${PRIVATE_ETC}/chroot-services.list /opt/etc/
    chmod 755 /opt/etc/chroot-services.list
    ln -s /opt/etc/init.d/S99debian /opt/bin/debian
    cp /etc/hosts /opt/debian/etc/
    #
    logger -st "($(basename $0))" $$ "***** ${SERVICE_FUNCTION} HAS BEEN COMPLETE *****"
    #
    exit 0
    #
else
    # Do nothing but prompt the user
    # 如果ENTWARE_ENABLE SERVICE未启用，则执行
    logger -st "($(basename $0))" $$ "***** ENTWARE_ENABLE SERVICE HAS NOT BEEN LOADED *****"
    logger -st "($(basename $0))" $$ "***** PLEASE ENABLE ENTWARE FIRST *****"
    logger -st "($(basename $0))" $$ "***** ${SERVICE_FUNCTION} HAS NOT BEEN COMPLETE *****"
    #
    exit 1
fi
#
########## END ##########