#!/bin/sh
#
########## CHECK ASUS ROUTER MODEL ##########
#
ROUTER_MODEL=$(nvram get model)
#
########## END ##########
#
#
########## SET THE CUSTOM VARIABLES ##########
#
# 设置自定义变量
# 当该程序运行结束，此处设置的变量自动取消
#
# USB_MOUNT_POINT: The mount point of the USB flash drive
# 设置自定义变量USB_MOUNT_POINT为U盘挂载点
USB_MOUNT_POINT=$(nvram get script_usbmount | sed 's/\/script_bootloader.*//')
#
# SBL_SYS_USR: The directory which contains all the external software resources (add-ons) related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_USR为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统外部软件资源目录，即插件目录
SBL_SYS_USR=${USB_MOUNT_POINT}/script_bootloader/usr
#
# SBL_MONITD: The directory which contains all the configuration files used by monit
# 设置自定义变量SBL_MONITD为monit配置文件目录
SBL_MONITD=${USB_MOUNT_POINT}/etc/monit.d
#
# SBL_SITE: The directory which contains all the sites
# 设置自定义变量SBL_SITE为站点目录
SBL_SITE=${USB_MOUNT_POINT}/www
#
# PRIVATE_ROOT: The root directory for this program
# 设置自定义变量PRIVATE_ROOT为此程序根目录
PRIVATE_ROOT=${SBL_SYS_USR}/ariang
#
# PRIVATE_BIN: The directory which contains all the executable files related to this program
# 设置自定义变量PRIVATE_BIN为此程序可执行文件目录
PRIVATE_BIN=${PRIVATE_ROOT}/bin
#
# PRIVATE_ETC: The directory which contains all the configuration files related to this program
# 设置自定义变量PRIVATE_ETC为此程序配置文件目录
PRIVATE_ETC=${PRIVATE_ROOT}/etc
#
# PRIVATE_USR: The directory which contains all the external software resources related to this program
# 设置自定义变量PRIVATE_USR为此程序外部软件资源目录
PRIVATE_USR=${PRIVATE_ROOT}/usr
#
# PRIVATE_SITE: The directory which contains the site related to this program
# 设置自定义变量PRIVATE_SITE为此程序站点目录
PRIVATE_SITE=${SBL_SITE}/ariang
#
# LATEST_VERSION: Version of the latest ariang
# 设置自定义变量LATEST_VERSION为最新版ariang的版本号
LATEST_VERSION=$(/opt/bin/curl -s https://github.com/mayswind/AriaNg/releases/latest/ | awk -F '/' '{print $8}' | awk -F '"' '{print $1}')
#
# DOWNLOAD_LINK: Download link of the latest ariang
# 设置自定义变量DOWNLOAD_LINK为最新版ariang的下载链接
DOWNLOAD_LINK="https://github.com/mayswind/AriaNg/releases/download/${LATEST_VERSION}/AriaNg-${LATEST_VERSION}-AllInOne.zip"
#
# NAME OF THE SERVICE
# 服务名称
SERVICE_NAME="ARIANG"
#
# FUNCTION OF THE SERVICE
# 服务功能
SERVICE_FUNCTION="INSTALLATION"
#
########## END ##########
#
#
########## NOTIFICATION ##########
#
logger -st "($(basename $0))" $$ "*--------- ${SERVICE_NAME} ON ${ROUTER_MODEL} ${SERVICE_FUNCTION} ---------*"
#
########## END ##########
#
#
########## INSTALL ARIANG ##########
#
# Check if ENTWARE_ENABLE SERVICE has been loaded
# 检查ENTWARE_ENABLE SERVICE是否已启用
if [ $(which opkg) == "/opt/bin/opkg" ]
then
    logger -st "($(basename $0))" $$ "***** ENTWARE_ENABLE SERVICE HAS BEEN LOADED *****"
    #
    # Check if MONIT MANAGEMENT SYSTEM has been deployed
    # 检查MONIT MANAGEMENT SYSTEM是否已部署
    if [ -e "/opt/bin/monit" ]
    then
        logger -st "($(basename $0))" $$ "***** MONIT MANAGEMENT SYSTEM HAS BEEN DEPLOYED *****"
        #
        # Remove vestigial ariang package
        # 删除遗留的ariang包
        rm -f ${PRIVATE_BIN}/AriaNg-${LATEST_VERSION}-AllInOne.zip > /dev/null 2>&1
        #
        # Download ariang
        # 下载ariang
        /opt/bin/wget-ssl -q --no-cookies --no-check-certificate -P ${PRIVATE_BIN} ${DOWNLOAD_LINK}
        #
        # Create directory ${PRIVATE_USR}
        # 创建${PRIVATE_USR}目录
        mkdir ${PRIVATE_USR}
        #
        # Unzip ariang package
        # 解压ariang包
        unzip ${PRIVATE_BIN}/AriaNg-${LATEST_VERSION}-AllInOne.zip -d ${PRIVATE_USR}/
        #
        # Remove ariang package
        # 删除ariang包
        rm -f ${PRIVATE_BIN}/AriaNg-${LATEST_VERSION}-AllInOne.zip > /dev/null 2>&1
        #
        # Configure ariang
        # 配置ariang
        mkdir ${PRIVATE_SITE}
        cp ${PRIVATE_USR}/index.html ${PRIVATE_SITE}/index.html > /dev/null 2>&1
        echo -e 'server.document-root = "/opt/www/ariang/"' > ${PRIVATE_ETC}/ariang_lighttpd.conf
        echo -e 'index-file.names = (\n  "index.php",\n  "index.htm",\n  "index.html",\n  "default.htm"\n)' >> ${PRIVATE_ETC}/ariang_lighttpd.conf
        echo -e 'server.port = 18914' >> ${PRIVATE_ETC}/ariang_lighttpd.conf
        echo -e 'server.pid-file = "/var/run/ariang.pid"' >> ${PRIVATE_ETC}/ariang_lighttpd.conf
        echo -e 'mimetype.assign = (\n  ".html" => "text/html",\n  ".txt" => "text/plain",\n  ".jpg" => "image/jpeg",\n  ".png" => "image/png"\n)' >> ${PRIVATE_ETC}/ariang_lighttpd.conf
        #
        # Configure monit
        # 配置monit
        cp ${PRIVATE_ETC}/monit.d/ariang ${SBL_MONITD}/
        chmod 600 ${SBL_MONITD}/ariang
        mv ${SBL_MONITD}/ariang ${SBL_MONITD}/ariang.on
        monit reload
        #
        logger -st "($(basename $0))" $$ "***** ${SERVICE_FUNCTION} HAS BEEN COMPLETE *****"
        #
        exit 0
        #
    else
        # Do nothing but prompt the user
        # 如果MONIT MANAGEMENT SYSTEM未部署，则执行
        logger -st "($(basename $0))" $$ "***** MONIT MANAGEMENT SYSTEM HAS NOT BEEN DEPLOYED *****"
        logger -st "($(basename $0))" $$ "***** PLEASE DEPLOY MONIT MANAGEMENT SYSTEM FIRST *****"
        logger -st "($(basename $0))" $$ "***** ${SERVICE_FUNCTION} HAS NOT BEEN COMPLETE *****"
        #
        exit 2
    fi
    #
else
    # Do nothing but prompt the user
    # 如果ENTWARE_ENABLE SERVICE未启用，则执行
    logger -st "($(basename $0))" $$ "***** ENTWARE_ENABLE SERVICE HAS NOT BEEN LOADED *****"
    logger -st "($(basename $0))" $$ "***** PLEASE ENABLE ENTWARE FIRST *****"
    logger -st "($(basename $0))" $$ "***** ${SERVICE_FUNCTION} HAS NOT BEEN COMPLETE *****"
    #
    exit 1
fi
#
########## END ##########