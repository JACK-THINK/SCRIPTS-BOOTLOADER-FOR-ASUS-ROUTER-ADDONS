#!/bin/sh
#
########## CHECK ASUS ROUTER MODEL ##########
#
ROUTER_MODEL="$(nvram get model)"
#
########## END ##########
#
#
########## SET THE CUSTOM VARIABLES ##########
#
# 设置自定义变量
# 当该程序运行结束，此处设置的变量自动取消
#
# NAME OF THE SERVICE
# 服务名称
SERVICE_NAME="VLMCSD"
#
# FUNCTION OF THE SERVICE
# 服务功能
SERVICE_FUNCTION="INSTALL"
#
# USB_MOUNT_POINT: The mount point of the USB flash drive
# 设置自定义变量USB_MOUNT_POINT为U盘挂载点
USB_MOUNT_POINT="$(nvram get script_usbmount | /opt/bin/sed 's/\/script_bootloader.*//')"
#
# SBL_SYS_USR: The directory which contains all the external software resources (add-ons) related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_USR为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统外部软件资源目录，即插件目录
SBL_SYS_USR="${USB_MOUNT_POINT}/script_bootloader/usr"
#
# ENTWARE_ETC: The directory which contains all the configuration files installed by Entware
# 设置自定义变量ENTWARE_ETC为Entware安装的配置文件目录
ENTWARE_ETC="${USB_MOUNT_POINT}/etc"
#
# ENTWARE_MONITD: The directory which contains all the configuration files used by monit
# 设置自定义变量ENTWARE_MONITD为monit配置文件目录
ENTWARE_MONITD="${ENTWARE_ETC}/monit.d"
#
# ENTWARE_FWD: The directory which contains all the configuration files used by fwd
# 设置自定义变量ENTWARE_FWD为fwd配置文件目录
ENTWARE_FWD="${ENTWARE_ETC}/fw.d"
#
# ENTWARE_DNSMASQD: The directory which contains all the configuration files used by dnsmasq
# 设置自定义变量ENTWARE_DNSMASQD为dnsmasq配置文件目录
ENTWARE_DNSMASQD="${ENTWARE_ETC}/dnsmasq.d"
#
# PRIVATE_ROOT: The root directory for this program
# 设置自定义变量PRIVATE_ROOT为此程序根目录
PRIVATE_ROOT="${SBL_SYS_USR}/vlmcsd"
#
# PRIVATE_ETC: The directory which contains all the configuration files related to this program
# 设置自定义变量PRIVATE_ETC为此程序配置文件目录
PRIVATE_ETC="${PRIVATE_ROOT}/etc"
#
# PRIVATE_USR: The directory which contains all the external software resources related to this program
# 设置自定义变量PRIVATE_USR为此程序外部软件资源目录
PRIVATE_USR="${PRIVATE_ROOT}/usr"
#
########## END ##########
#
#
########## NOTIFICATION ##########
#
/opt/bin/echo -e "($(basename $0)): $$ *--------- ${SERVICE_FUNCTION} ${SERVICE_NAME} ON ${ROUTER_MODEL} ---------*"
#
########## END ##########
#
#
########## INSTALL VLMCSD ##########
#
# Check if ENTWARE_ENABLE SERVICE has been loaded
# 检查ENTWARE_ENABLE SERVICE是否已启用
if [ "$(which opkg)" == "/opt/bin/opkg" ]
then
    /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: ENTWARE_ENABLE SERVICE HAS BEEN LOADED"
    #
    # Check if MONIT MANAGEMENT SYSTEM is enabled
    # 检查MONIT MANAGEMENT SYSTEM是否已启用
    if [ "$(which monit)" == "/opt/bin/monit" ]
    then
        /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: MONIT MANAGEMENT SYSTEM HAS BEEN DEPLOYED"
        #
        # Install vlmcsd according to the architecture of the ASUS Router
        # 根据路由器架构，自动安装适当版本的vlmcsd
        case "$(/opt/bin/uname -m)" in
            "aarch64" | "armv7l")
                # Check if ${PRIVATE_USR}/vlmcsdmulti-armelv7-bcm47xx_53xx-openwrt-musl-static exist
                # 检查文件${PRIVATE_USR}/vlmcsdmulti-armelv7-bcm47xx_53xx-openwrt-musl-static是否存在
                if [ -e "${PRIVATE_USR}/vlmcsdmulti-armelv7-bcm47xx_53xx-openwrt-musl-static" ]
                then
                    # Create two symbolic link files named ${PRIVATE_USR}/vlmcs and ${PRIVATE_USR}/vlmcsd
                    # 如果文件${PRIVATE_USR}/vlmcsdmulti-armelv7-bcm47xx_53xx-openwrt-musl-static存在，则执行
                    /opt/bin/cp -fs "${PRIVATE_USR}/vlmcsdmulti-armelv7-bcm47xx_53xx-openwrt-musl-static" "${PRIVATE_USR}/vlmcs"
                    /opt/bin/cp -fs "${PRIVATE_USR}/vlmcsdmulti-armelv7-bcm47xx_53xx-openwrt-musl-static" "${PRIVATE_USR}/vlmcsd"
                    #
                else
                    # Do nothing but prompt the user
                    # 如果文件${PRIVATE_USR}/vlmcsdmulti-armelv7-bcm47xx_53xx-openwrt-musl-static不存在，则执行
                    /opt/bin/echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
                    #
                    exit 4
                fi
                #
                ;;
            "mips")
                # Check if ${PRIVATE_USR}/vlmcsdmulti-mips16el-asus-rt-n66u-uclibc-static exist
                # 检查文件${PRIVATE_USR}/vlmcsdmulti-mips16el-asus-rt-n66u-uclibc-static是否存在
                if [ -e "${PRIVATE_USR}/vlmcsdmulti-mips16el-asus-rt-n66u-uclibc-static" ]
                then
                    # Create two symbolic link files named ${PRIVATE_USR}/vlmcs and ${PRIVATE_USR}/vlmcsd
                    # 如果文件${PRIVATE_USR}/vlmcsdmulti-mips16el-asus-rt-n66u-uclibc-static存在，则执行
                    /opt/bin/cp -fs "${PRIVATE_USR}/vlmcsdmulti-mips16el-asus-rt-n66u-uclibc-static" "${PRIVATE_USR}/vlmcs"
                    /opt/bin/cp -fs "${PRIVATE_USR}/vlmcsdmulti-mips16el-asus-rt-n66u-uclibc-static" "${PRIVATE_USR}/vlmcsd"
                    #
                else
                    # Do nothing but prompt the user
                    # 如果文件${PRIVATE_USR}/vlmcsdmulti-mips16el-asus-rt-n66u-uclibc-static不存在，则执行
                    /opt/bin/echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
                    #
                    exit 6
                fi
                #
                ;;
            *)
                # Do nothing but prompt the user
                # 如果路由器架构不符合上述三种情况，则执行
                /opt/bin/echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: ROUTER ARCHITECTURE IS UNKNOWN"
                /opt/bin/echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
                #
                exit 3
                ;;
        esac
        #
        # Configure dnsmasq.d
        # 配置dnsmasq.d
        LOCAL_DOMAIN_A="$(/opt/bin/sed -n -e 's/^domain=//p' /etc/dnsmasq.conf)"
        LOCAL_DOMAIN_B="$(/opt/bin/sed -n -e 's/^domain=//p' "${ENTWARE_DNSMASQD}/dnsmasq_extended.conf")"
        #
        if [ -n "${LOCAL_DOMAIN_A}" ]
        then
            if [ ! -d "${PRIVATE_ETC}/dnsmasq.d" ]
            then
                /opt/bin/mkdir "${PRIVATE_ETC}/dnsmasq.d"
            fi
            #
            LOCAL_DOMAIN="${LOCAL_DOMAIN_A}"
            /opt/bin/echo -e "srv-host=_vlmcs._tcp.${LOCAL_DOMAIN},${ROUTER_MODEL}.${LOCAL_DOMAIN},1688,0,100" > "${PRIVATE_ETC}/dnsmasq.d/vlmcsd.conf"
            #
        elif [ -n "${LOCAL_DOMAIN_B}" ]
        then
            if [ ! -d "${PRIVATE_ETC}/dnsmasq.d" ]
            then
                /opt/bin/mkdir "${PRIVATE_ETC}/dnsmasq.d"
            fi
            #
            LOCAL_DOMAIN="${LOCAL_DOMAIN_B}"
            /opt/bin/echo -e "srv-host=_vlmcs._tcp.${LOCAL_DOMAIN},${ROUTER_MODEL}.${LOCAL_DOMAIN},1688,0,100" > "${PRIVATE_ETC}/dnsmasq.d/vlmcsd.conf"
            #
        else
            /opt/bin/echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: DOMAIN OF DNSMASQ IS MISSING"
            /opt/bin/echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: KMS AUTO DISCOVERY CAN'T BE SET"
        fi
        #
        # Configure fwd
        # 配置fwd
        /opt/bin/cp -f "${PRIVATE_ETC}/fw.d/vlmcsd_open" "${ENTWARE_FWD}"
        #
        # Configure monit
        # 配置monit
        /opt/bin/cp -f "${PRIVATE_ETC}/monit.d/vlmcsd" "${ENTWARE_MONITD}"
        /opt/bin/chmod 600 "${ENTWARE_MONITD}/vlmcsd"
        /opt/bin/mv -f "${ENTWARE_MONITD}/vlmcsd" "${ENTWARE_MONITD}/vlmcsd.on"
        #
        /opt/bin/cp -f "${PRIVATE_ETC}/monit.d/fw_filter_INPUT_vlmcsd" "${ENTWARE_MONITD}"
        /opt/bin/chmod 600 "${ENTWARE_MONITD}/fw_filter_INPUT_vlmcsd"
        /opt/bin/mv -f "${ENTWARE_MONITD}/fw_filter_INPUT_vlmcsd" "${ENTWARE_MONITD}/fw_filter_INPUT_vlmcsd.on"
        #
        /opt/bin/monit reload
        #
        /opt/bin/echo -e "($(basename $0)): $$ \033[1;42;37mSUCCESS\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
        #
        exit 0
        #
    else
        # Do nothing but prompt the user
        # 如果MONIT MANAGEMENT SYSTEM未部署，则执行
        /opt/bin/echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: MONIT MANAGEMENT SYSTEM HAS NOT BEEN DEPLOYED"
        /opt/bin/echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: PLEASE DEPLOY MONIT MANAGEMENT SYSTEM FIRST"
        /opt/bin/echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
        #
        exit 2
    fi
    #
else
    # Do nothing but prompt the user
    # 如果ENTWARE_ENABLE SERVICE未启用，则执行
    /opt/bin/echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: ENTWARE_ENABLE SERVICE HAS NOT BEEN LOADED"
    /opt/bin/echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: PLEASE ENABLE ENTWARE FIRST"
    /opt/bin/echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
    #
    exit 1
fi
#
########## END ##########