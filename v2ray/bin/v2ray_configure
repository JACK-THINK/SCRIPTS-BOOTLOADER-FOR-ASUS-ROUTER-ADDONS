#!/bin/sh
#
########## SET THE CUSTOM VARIABLES ##########
#
# 设置自定义变量
# 当该程序运行结束，此处设置的变量自动取消
#
# USB_MOUNT_POINT: The mount point of the USB flash drive
# 设置自定义变量USB_MOUNT_POINT为U盘挂载点
USB_MOUNT_POINT="$(nvram get script_usbmount | /opt/bin/sed 's/\/script_bootloader.*//')"
#
# SBL_SYS_USR: The directory which contains all the external software resources (add-ons) related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_USR为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统外部软件资源目录，即插件目录
SBL_SYS_USR="${USB_MOUNT_POINT}/script_bootloader/usr"
#
# PRIVATE_ROOT: The root directory for this program
# 设置自定义变量PRIVATE_ROOT为此程序根目录
PRIVATE_ROOT="${SBL_SYS_USR}/v2ray"
#
# PRIVATE_ETC: The directory which contains all the configuration files related to this program
# 设置自定义变量PRIVATE_ETC为此程序配置文件目录
PRIVATE_ETC="${PRIVATE_ROOT}/etc"
#
########## END ##########
#
#
########## LOAD FUNCTIONS ##########
#
doubleCheckAndConfirm()
{
    while [ 1 ]
    do
        local VALUE_1
        local VALUE_2
        #
        /opt/bin/echo -ne "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: INPUT THE VALUE: "
        read VALUE_1
        /opt/bin/echo -ne "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: INPUT THE VALUE AGAIN TO CONFIRM: "
        read VALUE_2
        #
        if [ "${VALUE_1}" == "${VALUE_2}" ]
        then
            eval ${1}="${VALUE_1}"
            break
        else
            /opt/bin/echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: THE TWO VALUES ARE INCONSISTENT"
        fi
    done
}
#
########## END ##########
#
#
########## SET PARAMETERS ##########
#
case ${#} in
    0)
        while [ 1 ]
        do
            /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mTRANSPORT SETTINGS\033[0m: tcp | https"
            doubleCheckAndConfirm TRANSPORT
            #
            case "$(/opt/bin/echo "${TRANSPORT}" | /opt/bin/sed -E 's/[[:upper:]]/\l&/g')" in
                "tcp")
                    /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mUPSTREAM DNS IP\033[0m: IP address of upstream DNS server"
                    doubleCheckAndConfirm UPSTREAM_DNS_IP
                    #
                    /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mWAN INBOUND VMESS ID\033[0m: vmess ID used to connect router from Internet"
                    doubleCheckAndConfirm WAN_INBOUND_VMESS_ID
                    #
                    /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mWAN INBOUND SS PASSWORD\033[0m: shadowsocks password used to connect router from Internet"
                    doubleCheckAndConfirm WAN_INBOUND_SS_PASSWORD
                    #
                    /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mSERVER ADDRESS\033[0m: IP address or domain name of remote v2ray server"
                    doubleCheckAndConfirm IP_OR_DOMAIN_OF_V2RAY_SERVER
                    #
                    /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mSERVER PORT\033[0m: port of remote v2ray server"
                    doubleCheckAndConfirm PORT_OF_V2RAY_SERVER
                    #
                    /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mOUTBOUND VMESS ID\033[0m: vmess ID used to connect remote v2ray server"
                    doubleCheckAndConfirm OUTBOUND_VMESS_ID
                    #
                    break
                    ;;
                "https")
                    /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mUPSTREAM DNS IP\033[0m: IP address of upstream DNS server"
                    doubleCheckAndConfirm UPSTREAM_DNS_IP
                    #
                    /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mWAN INBOUND VMESS ID\033[0m: vmess ID used to connect router from Internet"
                    doubleCheckAndConfirm WAN_INBOUND_VMESS_ID
                    #
                    /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mWAN INBOUND SS PASSWORD\033[0m: shadowsocks password used to connect router from Internet"
                    doubleCheckAndConfirm WAN_INBOUND_SS_PASSWORD
                    #
                    /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mSERVER ADDRESS\033[0m: domain name of remote v2ray server"
                    doubleCheckAndConfirm DOMAIN_OF_V2RAY_SERVER
                    #
                    /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: \033[4mOUTBOUND VMESS ID\033[0m: vmess ID used to connect remote v2ray server"
                    doubleCheckAndConfirm OUTBOUND_VMESS_ID
                    #
                    break
                    ;;
                *)
                    /opt/bin/echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: INPUT VALUE IS INVALID"
                    ;;
            esac
        done
        ;;
    *)
        /opt/bin/echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: WRONG NUMBER OF PARAMETERS"
        #
        exit 1
        ;;
esac
#
########## END ##########
#
#
########## CONFIGURE V2RAY ##########
#
case "$(/opt/bin/echo "${TRANSPORT}" | /opt/bin/sed -E 's/[[:upper:]]/\l&/g')" in
    "tcp")
        # Create ${PRIVATE_ETC}/config_proxy.json
        # 创建${PRIVATE_ETC}/config_proxy.json
        /opt/bin/cp -f "${PRIVATE_ETC}/config_proxy_tcp.json.template" "${PRIVATE_ETC}/config_proxy.json"
        #
        # Modify ${PRIVATE_ETC}/config_proxy.json
        # 修改${PRIVATE_ETC}/config_proxy.json
        /opt/bin/sed -E -i 's#<UPSTREAM_DNS_IP>#'"${UPSTREAM_DNS_IP}"'#' "${PRIVATE_ETC}/config_proxy.json"
        /opt/bin/sed -E -i 's#<WAN_INBOUND_VMESS_ID>#'"${WAN_INBOUND_VMESS_ID}"'#' "${PRIVATE_ETC}/config_proxy.json"
        /opt/bin/sed -E -i 's#<WAN_INBOUND_SS_PASSWORD>#'"${WAN_INBOUND_SS_PASSWORD}"'#' "${PRIVATE_ETC}/config_proxy.json"
        /opt/bin/sed -E -i 's#<IP_OR_DOMAIN_OF_V2RAY_SERVER>#'"${IP_OR_DOMAIN_OF_V2RAY_SERVER}"'#' "${PRIVATE_ETC}/config_proxy.json"
        /opt/bin/sed -E -i 's#<PORT_OF_V2RAY_SERVER>#'"${PORT_OF_V2RAY_SERVER}"'#' "${PRIVATE_ETC}/config_proxy.json"
        /opt/bin/sed -E -i 's#<OUTBOUND_VMESS_ID>#'"${OUTBOUND_VMESS_ID}"'#' "${PRIVATE_ETC}/config_proxy.json"
        ;;
    "https")
        # Create ${PRIVATE_ETC}/config_proxy.json
        # 创建${PRIVATE_ETC}/config_proxy.json
        /opt/bin/cp -f "${PRIVATE_ETC}/config_proxy_https.json.template" "${PRIVATE_ETC}/config_proxy.json"
        #
        # Modify ${PRIVATE_ETC}/config_proxy.json
        # 修改${PRIVATE_ETC}/config_proxy.json
        /opt/bin/sed -E -i 's#<UPSTREAM_DNS_IP>#'"${UPSTREAM_DNS_IP}"'#' "${PRIVATE_ETC}/config_proxy.json"
        /opt/bin/sed -E -i 's#<WAN_INBOUND_VMESS_ID>#'"${WAN_INBOUND_VMESS_ID}"'#' "${PRIVATE_ETC}/config_proxy.json"
        /opt/bin/sed -E -i 's#<WAN_INBOUND_SS_PASSWORD>#'"${WAN_INBOUND_SS_PASSWORD}"'#' "${PRIVATE_ETC}/config_proxy.json"
        /opt/bin/sed -E -i 's#<DOMAIN_OF_V2RAY_SERVER>#'"${DOMAIN_OF_V2RAY_SERVER}"'#' "${PRIVATE_ETC}/config_proxy.json"
        /opt/bin/sed -E -i 's#<OUTBOUND_VMESS_ID>#'"${OUTBOUND_VMESS_ID}"'#' "${PRIVATE_ETC}/config_proxy.json"
        ;;
esac
#
exit 0
#
########## END ##########