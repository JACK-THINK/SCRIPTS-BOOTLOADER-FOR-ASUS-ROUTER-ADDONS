#!/bin/sh
#
########## SET THE CUSTOM VARIABLES ##########
#
# 设置自定义变量
# 当该程序运行结束，此处设置的变量自动取消
#
# NAME OF THE SERVICE
# 服务名称
SERVICE_NAME="FW_V2RAY_TRANSPARENT_PROXY"
#
# FUNCTION OF THE SERVICE
# 服务功能
SERVICE_FUNCTION="ENABLE"
#
# USB_MOUNT_POINT: The mount point of the USB flash drive
# 设置自定义变量USB_MOUNT_POINT为U盘挂载点
USB_MOUNT_POINT="$(nvram get script_usbmount | /opt/bin/sed 's/\/script_bootloader.*//')"
#
# SBL_SYS_USR: The directory which contains all the external software resources (add-ons) related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_USR为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统外部软件资源目录，即插件目录
SBL_SYS_USR="${USB_MOUNT_POINT}/script_bootloader/usr"
#
# ENTWARE_ETC: The directory which contains all the configuration files installed by Entware
# 设置自定义变量ENTWARE_ETC为Entware安装的配置文件目录
ENTWARE_ETC="${USB_MOUNT_POINT}/etc"
#
# ENTWARE_DNSMASQD: The directory which contains all the configuration files used by dnsmasq
# 设置自定义变量ENTWARE_DNSMASQD为dnsmasq配置文件目录
ENTWARE_DNSMASQD="${ENTWARE_ETC}/dnsmasq.d"
#
# PRIVATE_ROOT: The root directory for this program
# 设置自定义变量PRIVATE_ROOT为此程序根目录
PRIVATE_ROOT="${SBL_SYS_USR}/v2ray"
#
# PRIVATE_ETC: The directory which contains all the configuration files related to this program
# 设置自定义变量PRIVATE_ETC为此程序配置文件目录
PRIVATE_ETC="${PRIVATE_ROOT}/etc"
#
# SERVER_DOMAIN: Domain of the V2RAY-SERVER
# 设置自定义变量SERVER_DOMAIN为V2RAY-SERVER的域名
SERVER_DOMAIN="$(/opt/bin/sed -E -n -e '/outbounds/,/port/s/^[[:space:]]*\"address\":[[:space:]]*\"(.*)\".*/\1/p' "${PRIVATE_ETC}/config_proxy.json")"
#
# SERVER_IP: Domain of the V2RAY-SERVER
# 设置自定义变量SERVER_IP为V2RAY-SERVER的IP地址
SERVER_IP="$(nslookup "${SERVER_DOMAIN}" | /opt/bin/sed -E -n -e '/Name/,+1s/.*:[[:space:]]+(([[:digit:]]+\.?){4})[[:space:]]+.*/\1/p')"
#
# LOCAL_PORT: Port of the V2RAY-DOKODEMO-DOOR
# 设置自定义变量LOCAL_PORT为V2RAY-DOKODEMO-DOOR的接收端口
LOCAL_PORT="45154"
#
# USER_DEFINED_CHAIN_NAME: Name of the user-defined chain
# 设置自定义变量USER_DEFINED_CHAIN_NAME为防火墙自定义链名
USER_DEFINED_CHAIN_NAME="V2RAY_TPROXY"
#
# INTRANET_SET: Set of intranet
# 设置自定义变量INTRANET_SET为内网地址集
INTRANET_SET="192.168.0.0/16"
#
# ROUTING_MARK: Mark of PBR
# 设置自定义变量ROUTING_MARK为策略路由标记
ROUTING_MARK="0x2333"
#
# ROUTING_TABLE: Routing table of PBR
# 设置自定义变量ROUTING_TABLE为策略路由表
ROUTING_TABLE="100"
#
# NF_TPROXY_CORE: The path to nf_tproxy_core.ko
# 设置自定义变量NF_TPROXY_CORE为文件nf_tproxy_core.ko的绝对路径
NF_TPROXY_CORE="$(/opt/bin/find /lib/modules/ -name "nf_tproxy_core.ko")"
#
# XT_TPROXY: The path to xt_TPROXY.ko
# 设置自定义变量XT_TPROXY为文件xt_TPROXY.ko的绝对路径
XT_TPROXY="$(/opt/bin/find /lib/modules/ -name "xt_TPROXY.ko")"
#
########## END ##########
#
#
########## NOTIFICATION ##########
#
/opt/bin/echo -e "($(basename $0)): $$ *--------- ${SERVICE_FUNCTION} ${SERVICE_NAME} ---------*"
#
########## END ##########
#
#
########## CHECK TPROXY MODULES ##########
#
if [ -n "${NF_TPROXY_CORE}" ] && [ -n "${XT_TPROXY}" ]
then
    TPROXY_MODULES_STATUS="true"
else
    TPROXY_MODULES_STATUS="false"
fi
#
########## END ##########
#
#
########## SET UP TCP PROXY ##########
#
# Create new chain
iptables -t nat -N "${USER_DEFINED_CHAIN_NAME}_TCP"
#
# Ignore your v2ray server's addresses
# It's very IMPORTANT, just be careful.
iptables -t nat -A "${USER_DEFINED_CHAIN_NAME}_TCP" -d "${SERVER_IP}" -j RETURN
#
# Ignore LANs and any other addresses you'd like to bypass the proxy
# See Wikipedia and RFC5735 for full list of reserved networks.
# See ashi009/bestroutetb for a highly optimized CHN route list.
iptables -t nat -A "${USER_DEFINED_CHAIN_NAME}_TCP" -d "0.0.0.0/8" -j RETURN
iptables -t nat -A "${USER_DEFINED_CHAIN_NAME}_TCP" -d "10.0.0.0/8" -j RETURN
iptables -t nat -A "${USER_DEFINED_CHAIN_NAME}_TCP" -d "127.0.0.0/8" -j RETURN
iptables -t nat -A "${USER_DEFINED_CHAIN_NAME}_TCP" -d "169.254.0.0/16" -j RETURN
iptables -t nat -A "${USER_DEFINED_CHAIN_NAME}_TCP" -d "172.16.0.0/12" -j RETURN
iptables -t nat -A "${USER_DEFINED_CHAIN_NAME}_TCP" -d "192.168.0.0/16" -j RETURN
iptables -t nat -A "${USER_DEFINED_CHAIN_NAME}_TCP" -d "224.0.0.0/4" -j RETURN
iptables -t nat -A "${USER_DEFINED_CHAIN_NAME}_TCP" -d "240.0.0.0/4" -j RETURN
#
# Anything else should be redirected to v2ray's local port
iptables -t nat -A "${USER_DEFINED_CHAIN_NAME}_TCP" -p tcp -j REDIRECT --to-ports "${LOCAL_PORT}"
#
# Check if ${NF_TPROXY_CORE} and ${XT_TPROXY} exist
# 检查${NF_TPROXY_CORE}和${XT_TPROXY}是否存在
if ${TPROXY_MODULES_STATUS}
then
    # Apply the rules for router
    iptables -t nat -A OUTPUT -p tcp -j "${USER_DEFINED_CHAIN_NAME}_TCP"
    #
    # Apply the rules for LAN
    iptables -t nat -A PREROUTING -p tcp -s "${INTRANET_SET}" -j "${USER_DEFINED_CHAIN_NAME}_TCP"
    #
    # 对内网数据包进行SNAT操作
    iptables -t nat -A POSTROUTING -s "${INTRANET_SET}" ! -d "${INTRANET_SET}" -j MASQUERADE
    #
else
    # Apply the rules for LAN
    iptables -t nat -A PREROUTING -p tcp -j "${USER_DEFINED_CHAIN_NAME}_TCP"
fi
#
########## END ##########
#
#
########## SET UP UDP PROXY ##########
#
# Check if ${NF_TPROXY_CORE} and ${XT_TPROXY} exist
# 检查${NF_TPROXY_CORE}和${XT_TPROXY}是否存在
if ${TPROXY_MODULES_STATUS}
then
    # Enable TPROXY
    # 启用TPROXY
    insmod "${NF_TPROXY_CORE}"
    insmod "${XT_TPROXY}"
    #
    # Create new chain
    iptables -t mangle -N "${USER_DEFINED_CHAIN_NAME}_UDP"
    #
    # Ignore your v2ray server's addresses
    # It's very IMPORTANT, just be careful.
    iptables -t mangle -A "${USER_DEFINED_CHAIN_NAME}_UDP" -d "${SERVER_IP}" -j RETURN
    #
    # Ignore LANs and any other addresses you'd like to bypass the proxy
    # See Wikipedia and RFC5735 for full list of reserved networks.
    # See ashi009/bestroutetb for a highly optimized CHN route list.
    iptables -t mangle -A "${USER_DEFINED_CHAIN_NAME}_UDP" -d "0.0.0.0/8" -j RETURN
    iptables -t mangle -A "${USER_DEFINED_CHAIN_NAME}_UDP" -d "10.0.0.0/8" -j RETURN
    iptables -t mangle -A "${USER_DEFINED_CHAIN_NAME}_UDP" -d "127.0.0.0/8" -j RETURN
    iptables -t mangle -A "${USER_DEFINED_CHAIN_NAME}_UDP" -d "169.254.0.0/16" -j RETURN
    iptables -t mangle -A "${USER_DEFINED_CHAIN_NAME}_UDP" -d "172.16.0.0/12" -j RETURN
    iptables -t mangle -A "${USER_DEFINED_CHAIN_NAME}_UDP" -d "192.168.0.0/16" -j RETURN
    iptables -t mangle -A "${USER_DEFINED_CHAIN_NAME}_UDP" -d "224.0.0.0/4" -j RETURN
    iptables -t mangle -A "${USER_DEFINED_CHAIN_NAME}_UDP" -d "240.0.0.0/4" -j RETURN
    #
    # Set mark
    iptables -t mangle -A "${USER_DEFINED_CHAIN_NAME}_UDP" -j MARK --set-mark "${ROUTING_MARK}"
    #
    # Apply the rules for router
    iptables -t mangle -A OUTPUT -p udp -j "${USER_DEFINED_CHAIN_NAME}_UDP"
    #
    # Apply the rules for LAN
    iptables -t mangle -A PREROUTING -p udp -s "${INTRANET_SET}" -m mark ! --mark "${ROUTING_MARK}" -j "${USER_DEFINED_CHAIN_NAME}_UDP"
    #
    # 处理打了MARK的UDP包
    iptables -t mangle -A PREROUTING -m mark --mark "${ROUTING_MARK}" -p udp -j TPROXY --on-ip "127.0.0.1" --on-port "${LOCAL_PORT}"
    #
    # 配置iproute2的策略路由规则
    ip route add local 0/0 dev lo table "${ROUTING_TABLE}"
    ip rule add fwmark "${ROUTING_MARK}" table "${ROUTING_TABLE}"
    #
else
    # Do nothing but prompt the user
    # 如果文件${NF_TPROXY_CORE}或${XT_TPROXY}不存在，则执行
    /opt/bin/echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: NO UDP PROXY"
fi
#
########## END ##########
#
#
########## UPDATE DNS SETTINGS ##########
#
/opt/bin/mv -f "/tmp/resolv.dnsmasq" "/tmp/resolv.dnsmasq.bak"
#
# Check if ${NF_TPROXY_CORE} and ${XT_TPROXY} exist
# 检查${NF_TPROXY_CORE}和${XT_TPROXY}是否存在
if ${TPROXY_MODULES_STATUS}
then
    /opt/bin/cp -lf "${PRIVATE_ETC}/dnsmasq.d/v2ray_dns_tproxy.conf" "${ENTWARE_DNSMASQD}"
else
    /opt/bin/cp -lf "${PRIVATE_ETC}/dnsmasq.d/v2ray_dns.conf" "${ENTWARE_DNSMASQD}"
fi
#
/opt/bin/dnsmasq.d_refresh > /dev/null 2>&1
#
########## END ##########
#
#
########## NOTIFICATION ##########
#
/opt/bin/echo -e "($(basename $0)): $$ \033[1;42;37mSUCCESS\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
#
exit 0
#
########## END ##########