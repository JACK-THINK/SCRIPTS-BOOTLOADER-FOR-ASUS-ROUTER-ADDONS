#!/bin/sh
#
########## CHECK ASUS ROUTER MODEL ##########
#
ROUTER_MODEL="$(nvram get model)"
#
########## END ##########
#
#
########## SET THE CUSTOM VARIABLES ##########
#
# 设置自定义变量
# 当该程序运行结束，此处设置的变量自动取消
#
# NAME OF THE SERVICE
# 服务名称
SERVICE_NAME="OVERTURE"
#
# FUNCTION OF THE SERVICE
# 服务功能
SERVICE_FUNCTION="INSTALL"
#
# USB_MOUNT_POINT: The mount point of the USB flash drive
# 设置自定义变量USB_MOUNT_POINT为U盘挂载点
USB_MOUNT_POINT="$(nvram get script_usbmount | /opt/bin/sed 's/\/script_bootloader.*//')"
#
# SBL_SYS_USR: The directory which contains all the external software resources (add-ons) related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_USR为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统外部软件资源目录，即插件目录
SBL_SYS_USR="${USB_MOUNT_POINT}/script_bootloader/usr"
#
# ENTWARE_ETC: The directory which contains all the configuration files installed by Entware
# 设置自定义变量ENTWARE_ETC为Entware安装的配置文件目录
ENTWARE_ETC="${USB_MOUNT_POINT}/etc"
#
# ENTWARE_MONITD: The directory which contains all the configuration files used by monit
# 设置自定义变量ENTWARE_MONITD为monit配置文件目录
ENTWARE_MONITD="${ENTWARE_ETC}/monit.d"
#
# PRIVATE_ROOT: The root directory for this program
# 设置自定义变量PRIVATE_ROOT为此程序根目录
PRIVATE_ROOT="${SBL_SYS_USR}/overture"
#
# PRIVATE_ALTERNATIVE: The directory which contains all the alternatives
# 设置自定义变量PRIVATE_ALTERNATIVE为此程序备用文件目录
PRIVATE_ALTERNATIVE="${PRIVATE_ROOT}/alternative"
#
# PRIVATE_BIN: The directory which contains all the executable files related to this program
# 设置自定义变量PRIVATE_BIN为此程序可执行文件目录
PRIVATE_BIN="${PRIVATE_ROOT}/bin"
#
# PRIVATE_ETC: The directory which contains all the configuration files related to this program
# 设置自定义变量PRIVATE_ETC为此程序配置文件目录
PRIVATE_ETC="${PRIVATE_ROOT}/etc"
#
# PRIVATE_USR: The directory which contains all the external software resources related to this program
# 设置自定义变量PRIVATE_USR为此程序外部软件资源目录
PRIVATE_USR="${PRIVATE_ROOT}/usr"
#
# LATEST_VERSION: Version of the latest overture
# 设置自定义变量LATEST_VERSION为最新版overture的版本号
LATEST_VERSION="$(/opt/bin/curl -s "https://api.github.com/repos/shawn1m/overture/releases/latest" | /opt/bin/sed -E -n -e 's/^[[:space:]]*\"tag_name\":[[:space:]]*\"(.*)\".*/\1/p')"
#
# OPERATING_SYSTEM: Operating system of the ASUS Router
# 设置自定义变量OPERATING_SYSTEM为华硕路由器系统
OPERATING_SYSTEM="$(/opt/bin/uname | /opt/bin/sed -E 's/[[:upper:]]/\l&/g')"
#
# ROUTER_ARCHITECTURE: Architecture of the ASUS Router
# 设置自定义变量ROUTER_ARCHITECTURE为华硕路由器架构
case "$(/opt/bin/uname -m)" in
    "aarch64")
        ROUTER_ARCHITECTURE="arm64"
        ;;
    "armv7l")
        ROUTER_ARCHITECTURE="arm"
        ;;
    "mips")
        ROUTER_ARCHITECTURE="mipsle-softfloat"
        ;;
    *)
        # Do nothing but prompt the user
        # 如果路由器架构不符合上述三种情况，则执行
        /opt/bin/echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: ROUTER ARCHITECTURE IS UNKNOWN"
        /opt/bin/echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
        #
        exit 3
        ;;
esac
#
# DOWNLOAD_LINK: Download link of the latest overture
# 设置自定义变量DOWNLOAD_LINK为最新版overture的下载链接
DOWNLOAD_LINK="https://github.com/shawn1m/overture/releases/download/${LATEST_VERSION}/overture-${OPERATING_SYSTEM}-${ROUTER_ARCHITECTURE}.zip"
#
# SS_LOCAL_LOCAL_PORT: Local port of the SS-LOCAL
# 设置自定义变量SS_LOCAL_LOCAL_PORT为SS-LOCAL的接收端口
SS_LOCAL_LOCAL_PORT="$(/opt/bin/sed -E -n -e 's/^[[:space:]]*\"local_port\":[[:space:]]*\"(.*)\".*/\1/p' "${SBL_SYS_USR}/shadowsocks/etc/config_local.json")"
#
# SS_TUNNEL_LOCAL_PORT: Port of the SS-TUNNEL
# 设置自定义变量SS_TUNNEL_LOCAL_PORT为SS-TUNNEL的接收端口
SS_TUNNEL_LOCAL_PORT="$(/opt/bin/sed -E -n -e 's/^[[:space:]]*\"local_port\":[[:space:]]*\"(.*)\".*/\1/p' "${SBL_SYS_USR}/shadowsocks/etc/config_tunnel.json")"
#
########## END ##########
#
#
########## NOTIFICATION ##########
#
/opt/bin/echo -e "($(basename $0)): $$ *--------- ${SERVICE_FUNCTION} ${SERVICE_NAME} ON ${ROUTER_MODEL} ---------*"
#
########## END ##########
#
#
########## INSTALL OVERTURE ##########
#
# Check if ENTWARE_ENABLE SERVICE has been loaded
# 检查ENTWARE_ENABLE SERVICE是否已启用
if [ "$(which opkg)" == "/opt/bin/opkg" ]
then
    /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: ENTWARE_ENABLE SERVICE HAS BEEN LOADED"
    #
    # Check if MONIT MANAGEMENT SYSTEM is enabled
    # 检查MONIT MANAGEMENT SYSTEM是否已启用
    if [ "$(which monit)" == "/opt/bin/monit" ]
    then
        /opt/bin/echo -e "($(basename $0)): $$ \033[1;44;37mINFO\033[0m: MONIT MANAGEMENT SYSTEM HAS BEEN DEPLOYED"
        #
        # Remove vestigial overture package
        # 删除遗留的overture包
        /opt/bin/rm -f "${PRIVATE_BIN}/overture-${OPERATING_SYSTEM}-${ROUTER_ARCHITECTURE}.zip"
        #
        # Check if ${PRIVATE_ALTERNATIVE}/version exists
        # 检查文件${PRIVATE_ALTERNATIVE}/version是否存在
        if [ -e "${PRIVATE_ALTERNATIVE}/version" ]
        then
            # Prepare to install offline
            # 准备离线安装
            LATEST_VERSION="$(/opt/bin/head -n 1 "${PRIVATE_ALTERNATIVE}/version")"
            /opt/bin/cp -f "${PRIVATE_ALTERNATIVE}/overture-${OPERATING_SYSTEM}-${ROUTER_ARCHITECTURE}.zip" "${PRIVATE_BIN}"
            #
        else
            # Download overture
            # 下载overture
            /opt/bin/wget-ssl -c -t 10 -T 120 --no-cookies --no-check-certificate -P "${PRIVATE_BIN}" "${DOWNLOAD_LINK}"
            #
            # Check if ${PRIVATE_BIN}/overture-${OPERATING_SYSTEM}-${ROUTER_ARCHITECTURE}.zip exists
            # 检查文件${PRIVATE_BIN}/overture-${OPERATING_SYSTEM}-${ROUTER_ARCHITECTURE}.zip是否存在
            if [ ! -s "${PRIVATE_BIN}/overture-${OPERATING_SYSTEM}-${ROUTER_ARCHITECTURE}.zip" ]
            then
                /opt/bin/echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: CONNECTION FAILED"
                /opt/bin/echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
                #
                /opt/bin/rm -f "${PRIVATE_BIN}/overture-${OPERATING_SYSTEM}-${ROUTER_ARCHITECTURE}.zip"
                #
                exit 5
            fi
            #
        fi
        #
        # Create directory overture
        # 创建overture目录
        /opt/bin/mkdir "${PRIVATE_USR}"
        #
        # Unzip overture package
        # 解压overture包
        /opt/bin/unzip "${PRIVATE_BIN}/overture-${OPERATING_SYSTEM}-${ROUTER_ARCHITECTURE}.zip" -d "${PRIVATE_USR}"
        #
        # Remove overture package
        # 删除overture包
        /opt/bin/rm -f "${PRIVATE_BIN}/overture-${OPERATING_SYSTEM}-${ROUTER_ARCHITECTURE}.zip"
        #
        # Change the name of the program
        # 更改程序名称
        /opt/bin/mv -f "${PRIVATE_USR}/overture-${OPERATING_SYSTEM}-${ROUTER_ARCHITECTURE}" "${PRIVATE_USR}/overture"
        #
        # Change the mode of the files
        # 更改文件权限
        /opt/bin/chmod 644 "${PRIVATE_USR}"/*
        /opt/bin/chmod 755 "${PRIVATE_USR}/overture"
        #
        # Configure overture
        # 配置overture
        /opt/bin/cp -f "${PRIVATE_ETC}/config.json.template" "${PRIVATE_ETC}/config.json"
        /opt/bin/sed -E -i '/^[[:space:]]+\"BindAddress\":/s/[[:digit:]]+/'"${SS_TUNNEL_LOCAL_PORT}"'/' "${PRIVATE_ETC}/config.json"
        /opt/bin/sed -E -i '/^[[:space:]]+\"SOCKS5Address\":/s/[[:digit:].:]{2,}/127.0.0.1:'"${SS_LOCAL_LOCAL_PORT}"'/' "${PRIVATE_ETC}/config.json"
        #
        # Configure dnsmasq.d
        # 配置dnsmasq.d
        if [ ! -d "${PRIVATE_ETC}/dnsmasq.d" ]
        then
            /opt/bin/mkdir "${PRIVATE_ETC}/dnsmasq.d"
        fi
        #
        /opt/bin/echo -e "server=127.0.0.1#${SS_TUNNEL_LOCAL_PORT}" > "${PRIVATE_ETC}/dnsmasq.d/overture.conf"
        #
        # Configure monit
        # 配置monit
        #/opt/bin/cp -f "${PRIVATE_ETC}/monit.d/overture" "${ENTWARE_MONITD}"
        #/opt/bin/chmod 600 "${ENTWARE_MONITD}/overture"
        #/opt/bin/mv -f "${ENTWARE_MONITD}/overture" "${ENTWARE_MONITD}/overture.on"
        #/opt/bin/monit reload
        #
        /opt/bin/echo -e "($(basename $0)): $$ \033[1;42;37mSUCCESS\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
        #
        exit 0
        #
    else
        # Do nothing but prompt the user
        # 如果MONIT MANAGEMENT SYSTEM未部署，则执行
        /opt/bin/echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: MONIT MANAGEMENT SYSTEM HAS NOT BEEN DEPLOYED"
        /opt/bin/echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: PLEASE DEPLOY MONIT MANAGEMENT SYSTEM FIRST"
        /opt/bin/echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
        #
        exit 2
    fi
    #
else
    # Do nothing but prompt the user
    # 如果ENTWARE_ENABLE SERVICE未启用，则执行
    /opt/bin/echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: ENTWARE_ENABLE SERVICE HAS NOT BEEN LOADED"
    /opt/bin/echo -e "($(basename $0)): $$ \033[1;43;31mNOTICE\033[0m: PLEASE ENABLE ENTWARE FIRST"
    /opt/bin/echo -e "($(basename $0)): $$ \033[1;41;37mFAILURE\033[0m: ${SERVICE_FUNCTION} ${SERVICE_NAME}"
    #
    exit 1
fi
#
########## END ##########