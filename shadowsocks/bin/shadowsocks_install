#!/bin/sh
#
########## CHECK ASUS ROUTER MODEL ##########
#
ROUTER_MODEL=$(nvram get model)
#
########## END ##########
#
#
########## SET THE CUSTOM VARIABLES ##########
#
# 设置自定义变量
# 当该程序运行结束，此处设置的变量自动取消
#
# USB_MOUNT_POINT: The mount point of the USB flash drive
# 设置自定义变量USB_MOUNT_POINT为U盘挂载点
USB_MOUNT_POINT=$(nvram get script_usbmount | sed 's/\/script_bootloader.*//')
#
# SBL_SYS_USR: The directory which contains all the external software resources (add-ons) related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_USR为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统外部软件资源目录，即插件目录
SBL_SYS_USR=${USB_MOUNT_POINT}/script_bootloader/usr
#
# ENTWARE_MONITD: The directory which contains all the configuration files used by monit
# 设置自定义变量ENTWARE_MONITD为monit配置文件目录
ENTWARE_MONITD=${USB_MOUNT_POINT}/etc/monit.d
#
# PRIVATE_ROOT: The root directory for this program
# 设置自定义变量PRIVATE_ROOT为此程序根目录
PRIVATE_ROOT=${SBL_SYS_USR}/shadowsocks
#
# PRIVATE_ETC: The directory which contains all the configuration files related to this program
# 设置自定义变量PRIVATE_ETC为此程序配置文件目录
PRIVATE_ETC=${PRIVATE_ROOT}/etc
#
# PACKAGE_ARCHITECTURE: Architecture of alternative packages
# 设置自定义变量PACKAGE_ARCHITECTURE为备用软件包架构
case $(uname -m) in
    "armv7l")
        PACKAGE_ARCHITECTURE="armv7-2.6"
        ;;
    "aarch64")
        PACKAGE_ARCHITECTURE="aarch64-3.10"
        ;;
    "mips")
        PACKAGE_ARCHITECTURE="mipselsf"
        ;;
    *)
        # Do nothing but prompt the user
        # 如果路由器架构不符合上述三种情况，则执行
        logger -st "($(basename $0))" $$ "***** ROUTER ARCHITECTURE IS UNKNOWN *****"
        exit 3
        ;;
esac
#
# PRIVATE_ALTERNATIVE: The directory which contains all the alternatives
# 设置自定义变量PRIVATE_ALTERNATIVE为此程序备用文件目录
PRIVATE_ALTERNATIVE=${PRIVATE_ROOT}/alternative/${PACKAGE_ARCHITECTURE}
#
# NAME OF THE SERVICE
# 服务名称
SERVICE_NAME="SHADOWSOCKS"
#
# FUNCTION OF THE SERVICE
# 服务功能
SERVICE_FUNCTION="INSTALLATION"
#
########## END ##########
#
#
########## NOTIFICATION ##########
#
logger -st "($(basename $0))" $$ "*--------- ${SERVICE_NAME} ON ${ROUTER_MODEL} ${SERVICE_FUNCTION} ---------*"
#
########## END ##########
#
#
########## INSTALL SHADOWSOCKS ##########
#
# Check if ENTWARE_ENABLE SERVICE has been loaded
# 检查ENTWARE_ENABLE SERVICE是否已启用
if [ $(which opkg) == "/opt/bin/opkg" ]
then
    logger -st "($(basename $0))" $$ "***** ENTWARE_ENABLE SERVICE HAS BEEN LOADED *****"
    #
    # Check if MONIT MANAGEMENT SYSTEM has been deployed
    # 检查MONIT MANAGEMENT SYSTEM是否已部署
    if [ -e "/opt/bin/monit" ]
    then
        logger -st "($(basename $0))" $$ "***** MONIT MANAGEMENT SYSTEM HAS BEEN DEPLOYED *****"
        #
        # Update the list of available packages
        # 更新可用程序包列表
        opkg update
        #
        # Check if ${PRIVATE_ALTERNATIVE} exists
        # 检查目录${PRIVATE_ALTERNATIVE}是否存在
        if [ -e ${PRIVATE_ALTERNATIVE} ]
        then
            # Install shadowsocks-libev offline
            # 离线安装shadowsocks-libev
            opkg install ${PRIVATE_ALTERNATIVE}/shadowsocks-libev-config_*.ipk
            opkg install ${PRIVATE_ALTERNATIVE}/shadowsocks-libev-ss-local_*.ipk
            opkg install ${PRIVATE_ALTERNATIVE}/shadowsocks-libev-ss-redir_*.ipk
            opkg install ${PRIVATE_ALTERNATIVE}/shadowsocks-libev-ss-rules_*.ipk
            opkg install ${PRIVATE_ALTERNATIVE}/shadowsocks-libev-ss-server_*.ipk
            opkg install ${PRIVATE_ALTERNATIVE}/shadowsocks-libev-ss-tunnel_*.ipk
            #
        else
            # Install shadowsocks-libev online
            # 在线安装shadowsocks-libev
            opkg install shadowsocks-libev-config
            opkg install shadowsocks-libev-ss-local
            opkg install shadowsocks-libev-ss-redir
            opkg install shadowsocks-libev-ss-rules
            opkg install shadowsocks-libev-ss-server
            opkg install shadowsocks-libev-ss-tunnel
        fi
        #
        # Install haveged and simple-obfs
        # 安装haveged和simple-obfs
        opkg install haveged
        opkg install simple-obfs
        opkg install simple-obfs-server
        #
        # Install overture
        # 安装overture
        ${SBL_SYS_USR}/overture/bin/overture_install
        if [ $? != '0' ]
        then
            echo -e "\033[1;41;37m***** OVERTURE HAS NOT BEEN INSTALLED PROPERLY *****\033[0m"
            #
            exit 7
        fi
        #
        # Disable /opt/etc/init.d/S*shadowsocks
        # 禁用/opt/etc/init.d/S*shadowsocks
        sed -i '/^ENABLED.*/s/^/#/' /opt/etc/init.d/S*shadowsocks
        sed -i '/^#ENABLED.*/a\ENABLED=no' /opt/etc/init.d/S*shadowsocks
        #
        # Configure monit
        # 配置monit
        cp ${PRIVATE_ETC}/monit.d/ss_local ${ENTWARE_MONITD}/
        chmod 600 ${ENTWARE_MONITD}/ss_local
        mv ${ENTWARE_MONITD}/ss_local ${ENTWARE_MONITD}/ss_local.on
        #
        cp ${PRIVATE_ETC}/monit.d/ss_server ${ENTWARE_MONITD}/
        chmod 600 ${ENTWARE_MONITD}/ss_server
        #mv ${ENTWARE_MONITD}/ss_server ${ENTWARE_MONITD}/ss_server.on
        #
        cp ${PRIVATE_ETC}/monit.d/ss_transparent_proxy_overture_file ${ENTWARE_MONITD}/
        chmod 600 ${ENTWARE_MONITD}/ss_transparent_proxy_overture_file
        mv ${ENTWARE_MONITD}/ss_transparent_proxy_overture_file ${ENTWARE_MONITD}/ss_transparent_proxy_overture_file.on
        #
        cp ${PRIVATE_ETC}/monit.d/ss_transparent_proxy_overture_prog ${ENTWARE_MONITD}/
        chmod 600 ${ENTWARE_MONITD}/ss_transparent_proxy_overture_prog
        #mv ${ENTWARE_MONITD}/ss_transparent_proxy_overture_prog ${ENTWARE_MONITD}/ss_transparent_proxy_overture_prog.on
        #
        monit reload
        #
        logger -st "($(basename $0))" $$ "***** ${SERVICE_FUNCTION} HAS BEEN COMPLETE *****"
        #
        exit 0
        #
    else
        # Do nothing but prompt the user
        # 如果MONIT MANAGEMENT SYSTEM未部署，则执行
        logger -st "($(basename $0))" $$ "***** MONIT MANAGEMENT SYSTEM HAS NOT BEEN DEPLOYED *****"
        logger -st "($(basename $0))" $$ "***** PLEASE DEPLOY MONIT MANAGEMENT SYSTEM FIRST *****"
        logger -st "($(basename $0))" $$ "***** ${SERVICE_FUNCTION} HAS NOT BEEN COMPLETE *****"
        #
        exit 2
    fi
    #
else
    # Do nothing but prompt the user
    # 如果ENTWARE_ENABLE SERVICE未启用，则执行
    logger -st "($(basename $0))" $$ "***** ENTWARE_ENABLE SERVICE HAS NOT BEEN LOADED *****"
    logger -st "($(basename $0))" $$ "***** PLEASE ENABLE ENTWARE FIRST *****"
    logger -st "($(basename $0))" $$ "***** ${SERVICE_FUNCTION} HAS NOT BEEN COMPLETE *****"
    #
    exit 1
fi
#
########## END ##########