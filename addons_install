#!/bin/sh
#
########## CHECK ASUS ROUTER MODEL ##########
#
ROUTER_MODEL=$(nvram get model)
#
########## END ##########
#
#
########## SET THE CUSTOM VARIABLES ##########
#
# 设置自定义变量
# 当该程序运行结束，此处设置的变量自动取消
#
# USB_MOUNT_POINT: The mount point of the USB flash drive
# 设置自定义变量USB_MOUNT_POINT为U盘挂载点
USB_MOUNT_POINT=$(nvram get script_usbmount | sed 's/\/script_bootloader.*//')
#
# SBL_SYS_ROOT: The root directory for SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_ROOT为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统根目录
SBL_SYS_ROOT=${USB_MOUNT_POINT}/script_bootloader
#
# SBL_SYS_TMP: The directory which contains all the temporary files related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_TMP为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统临时文件目录
SBL_SYS_TMP=${SBL_SYS_ROOT}/tmp
#
# SBL_SYS_USR: The directory which contains all the external software resources (add-ons) related to SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER
# 设置自定义变量SBL_SYS_USR为SCRIPTS-BOOTLOADER-FOR-ASUS-ROUTER系统外部软件资源目录，即插件目录
SBL_SYS_USR=${SBL_SYS_ROOT}/usr
#
# SBL_MONITD: The directory which contains all the configuration files used by monit
# 设置自定义变量SBL_MONITD为monit配置文件目录
SBL_MONITD=${USB_MOUNT_POINT}/etc/monit.d
#
# NAME OF THE SERVICE
# 服务名称
SERVICE_NAME="ADDONS"
#
# FUNCTION OF THE SERVICE
# 服务功能
SERVICE_FUNCTION="INSTALLATION"
#
########## END ##########
#
#
########## GENERATE ADDON LIST ##########
#
find ${SBL_SYS_USR} -name "*_install" | grep -vE '(development|entware|monit|swap|timezone|software|dev_|old_|deprecated)' > ${SBL_SYS_TMP}/addon_install_list
#
########## END ##########
#
#
########## ADDONS INSTALLATION ##########
#
while [ 1 ]
do
    # Print the menu for addons
    # 打印插件菜单
    ADDON_COUNT=$(cat ${SBL_SYS_TMP}/addon_install_list | wc -l)
    ADDON_ORDER=1
    echo -e "Choose the addon you want to install:\n"
    echo -e "\033[1;31m0. exit\033[0m"
    while [ ${ADDON_ORDER} -le ${ADDON_COUNT} ]
    do
        echo -n "${ADDON_ORDER}. "
        sed -e 's/.*\///' -e 's/_install//' -ne "${ADDON_ORDER}p" ${SBL_SYS_TMP}/addon_install_list
        ADDON_ORDER=$((${ADDON_ORDER} + 1))
    done
    #
    echo -en "\nInput ONE INTEGER every time: "
    #
    # Read the input of user
    # 读取用户输入值
    read INPUT_VALUE
    #
    # Check if value ${INPUT_VALUE} is valid
    # 检查值${INPUT_VALUE}是否有效
    if [ ${INPUT_VALUE} -lt 0 ] || [ ${INPUT_VALUE} -gt ${ADDON_COUNT} ]
    then
        echo -e "\033[1;41;37m***** ERROR: INVALID INPUT VALUE *****\033[0m\n"
        #
    else
        if [ ${INPUT_VALUE} -eq 0 ]
        then
            break
        fi
        ADDON_TO_INSTALL=$(sed -e 's/.*\///' -e 's/_install//' -ne "${INPUT_VALUE}p" ${SBL_SYS_TMP}/addon_install_list)
        #
        # Check if ${SBL_SYS_TMP}/${ADDON_TO_INSTALL} exists
        # 检查文件${SBL_SYS_TMP}/${ADDON_TO_INSTALL}是否存在
        if [ ! -e ${SBL_SYS_TMP}/${ADDON_TO_INSTALL} ]
        then
            # Install the addon chosen by user
            # 安装用户选择的插件
            touch ${SBL_SYS_TMP}/${ADDON_TO_INSTALL}
            $(sed -ne "${INPUT_VALUE}p" ${SBL_SYS_TMP}/addon_install_list)
            #
            # Check if return value is 0
            # 检查返回值是否为0
            if [ $? == '0' ]
            then
                echo -e "\033[1;42;37m***** ${ADDON_TO_INSTALL}: SUCCEEDED *****\033[0m\n" | tee -a ${SBL_SYS_TMP}/addon_installation_log
                #
            else
                echo -e "\033[1;41;37m***** ${ADDON_TO_INSTALL}: FAILED *****\033[0m\n" | tee -a ${SBL_SYS_TMP}/addon_installation_log
            fi
            #
        else
            echo -e "\033[1;41;37m***** ERROR: ${ADDON_TO_INSTALL} HAS BEEN INSTALLED *****\033[0m\n" | tee -a ${SBL_SYS_TMP}/addon_installation_log
        fi
    fi
done